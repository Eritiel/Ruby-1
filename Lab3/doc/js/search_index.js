var search_data = {"index":{"searchIndex":["argumentvalueerror","employee","address=()","birth=()","birth_date_check()","check_exp()","date_format()","email_check()","email_format()","employee_without_experience()","exp=()","last_job_name=()","last_job_salary=()","last_job_spec=()","mail=()","name=()","name_check()","name_format()","new()","new()","number_check()","passport=()","passport_check()","passport_format()","phone=()","phone_format()","spec=()","to_s()"],"longSearchIndex":["argumentvalueerror","employee","employee#address=()","employee#birth=()","employee::birth_date_check()","employee#check_exp()","employee::date_format()","employee::email_check()","employee::email_format()","employee::employee_without_experience()","employee#exp=()","employee#last_job_name=()","employee#last_job_salary=()","employee#last_job_spec=()","employee#mail=()","employee#name=()","employee::name_check()","employee::name_format()","argumentvalueerror::new()","employee::new()","employee::number_check()","employee#passport=()","employee::passport_check()","employee::passport_format()","employee#phone=()","employee::phone_format()","employee#spec=()","employee#to_s()"],"info":[["ArgumentValueError","","ArgumentValueError.html","","<p>Инициализирует исключение типа ArgumentValueError.\n"],["Employee","","Employee.html","","<p>Класс для хранения информации о сотруднике и проверки корректности введенных данных\n"],["address=","Employee","Employee.html#method-i-address-3D","(new_address)","<p>Устанавливает значение <code>address</code>.\n"],["birth=","Employee","Employee.html#method-i-birth-3D","(new_birth)","<p>Устанавливает значение <code>birth</code>.\n"],["birth_date_check","Employee","Employee.html#method-c-birth_date_check","(birth)","<p>Определяет, является ли введенная строка датой. Возвращает <code>0</code>,если строка является датой.\n\n<pre>=== Аргументы ...</pre>\n"],["check_exp","Employee","Employee.html#method-i-check_exp","(exp,last_job_name,last_job_spec,last_job_salary)","<p>Определяет, необходимо ли инициализировать поля <code>last_job_name</code>, <code>last_job_spec</code>, <code>last_job_salary</code> Если поле …\n"],["date_format","Employee","Employee.html#method-c-date_format","(birth)","<p>Если введенная строка является датой, возвращает ее в формате DD.MM.YYYY. В противном случае вызывает …\n"],["email_check","Employee","Employee.html#method-c-email_check","(mail)","<p>Определяет, является ли введенная строка адресом электронной почты. Возвращает <code>0</code>,если строка является …\n"],["email_format","Employee","Employee.html#method-c-email_format","(mail)","<p>Если введенная строка является адресом электронной почты, возвращает ее в формате example@gmail.com. …\n"],["employee_without_experience","Employee","Employee.html#method-c-employee_without_experience","(id, name, birth, phone, address, mail, passport, spec)","<p>Инициализирует новый экземпляр для сотрудника без опыта работы.\n"],["exp=","Employee","Employee.html#method-i-exp-3D","(new_exp)","<p>Устанавливает значение <code>exp</code>.\n"],["last_job_name=","Employee","Employee.html#method-i-last_job_name-3D","(new_last_job_name)","<p>Устанавливает значение <code>last_job_name</code>.\n"],["last_job_salary=","Employee","Employee.html#method-i-last_job_salary-3D","(new_last_job_salary)","<p>Устанавливает значение <code>last_job_salary</code>.\n"],["last_job_spec=","Employee","Employee.html#method-i-last_job_spec-3D","(new_last_job_spec)","<p>Устанавливает значение <code>last_job_spec</code>.\n"],["mail=","Employee","Employee.html#method-i-mail-3D","(new_mail)","<p>Устанавливает значение <code>mail</code>.\n"],["name=","Employee","Employee.html#method-i-name-3D","(new_name)","<p>Устанавливает значение <code>name</code>.\n"],["name_check","Employee","Employee.html#method-c-name_check","(name)","<p>Определяет, является ли введенная строка ФИО. Возвращает <code>0</code>, если строка является ФИО.\n\n<pre>=== Аргументы\n* ...</pre>\n"],["name_format","Employee","Employee.html#method-c-name_format","(name)","<p>Если введенная строка является ФИО, возвращает ее в формате Фамилия Имя Отчество. В противном случае …\n"],["new","ArgumentValueError","ArgumentValueError.html#method-c-new","(msg = \"ArgumentValueError\")","<p>Создает новый экземпляр со значением ArgumentValueError.\n\n<pre>* _msg_ - тип вызываемого исключения</pre>\n"],["new","Employee","Employee.html#method-c-new","(id, name, birth, phone, address, mail, passport, spec, exp, last_job_name, last_job_spec, last_job_salary)","<p>Создает новый экземпляр со строковыми атрибутами\n\n<pre>* _id_ - номер сотрудника\n* _name_ - имя сотрудника\n* ...</pre>\n"],["number_check","Employee","Employee.html#method-c-number_check","(phone)","<p>Определяет, является ли введенная строка номером телефона. Возвращает <code>0</code>,если строка является номером …\n"],["passport=","Employee","Employee.html#method-i-passport-3D","(new_passport)","<p>Устанавливает значение <code>passport</code>.\n"],["passport_check","Employee","Employee.html#method-c-passport_check","(passport)","<p>Определяет, является ли введенная строка паспортными данными. Возвращает <code>0</code>,если строка является паспортными …\n"],["passport_format","Employee","Employee.html#method-c-passport_format","(passport)","<p>Если введенная строка является паспортными данными, возвращает ее в формате XXXX XXXXX. В противном случае …\n"],["phone=","Employee","Employee.html#method-i-phone-3D","(new_phone)","<p>Устанавливает значение <code>phone</code>.\n"],["phone_format","Employee","Employee.html#method-c-phone_format","(phone)","<p>Если введенная строка является номером телефона, возвращает ее в формате 7-XXX-XXXXXXX. В противном случае …\n"],["spec=","Employee","Employee.html#method-i-spec-3D","(new_spec)","<p>Устанавливает значение <code>spec</code>.\n"],["to_s","Employee","Employee.html#method-i-to_s","()","<p>Осуществляет представление объекта класса <code>Employee</code> в виде форматированной строки.\n"]]}}